#!/usr/bin/env node

const fs = require('fs');
const readline = require('readline');
const csvWriter = require('csv-write-stream')
const path = require('path');
const execSync = require('child_process').execSync;
const https = require('https');
const { google } = require('googleapis');

const SCOPES = ['https://www.googleapis.com/auth/drive.file'];
const TOKEN_PATH = 'token.json';

const isWindows = process.platform === 'win32';

const useMetaFlac = true;
let internalRootDir;
let externalRootDir;
let externalFileListFile = 'external.txt';
let internalFileListFile = 'internal.txt';

if (isWindows) {
  internalRootDir = 'z:';
  externalRootDir = 'y:';
} else {
  internalRootDir = '/Volumes/HAP_Internal/';
  externalRootDir = '/Volumes/HAP_External/';
}

const pref = loadPref();
const lastSynced = pref.lastSynced;
const now = new Date();
const tracksFile = 'tracks_' + now.getFullYear() + (now.getMonth() + 1) + now.getDate() + '.csv';

console.log('last synced: ' + new Date(lastSynced));
const TAGS = [
  'TRACKNUMBER',
  'TITLE',
  'ALBUM',
  'ARTIST',
  'COMMENT',
  'GENRE',
  'DATE',
  'COPYRIGHT'
];

function notifySlack(text) {
  return new Promise((resolve, reject) => {
    const req = https.request(process.env.SLACK_URL, { method: 'POST' }, resolve);
    req.on('error', reject);
    req.write(JSON.stringify({ text: text}));
    req.end();
  });
}

function loadPref() {
  try {
    const json = fs.readFileSync("uploader.json");
    return JSON.parse(json);
  } catch (e) {
    return {
      lastSynced: 0,
    };
  }
}

function savePref() {
  fs.writeFileSync("uploader.json" , JSON.stringify({
    lastSynced: Date.now()
  }));
}

const opts = TAGS.map(function(t) {
  return '--show-tag=' + t;
});

function isTrackFile(ext) {
  return ext.length > 3 && ext.match(/[^\.a-zA-Z0-9]/) === null;
}

function handlePathListFile(file, rootDir, writer) {
  return new Promise((resolve, reject) => {
    const stream = fs.createReadStream(file, "utf8");
    const reader = readline.createInterface({ input: stream });
    let count = 0;

    reader.on("line", (p) => {
      const stats = fs.statSync(rootDir + p);
      if (lastSynced > stats.mtime.getTime()) {
        console.log('Skip old file: ' + p);
        return;
      }
      const ext = path.extname(p);
      let track = null;
      let type = null;
      if (useMetaFlac && ext === '.flac') {
        try {
          track = buildTrackFromFlacMeta(p, rootDir);
          type = 'flac';
        } catch (e) {
          console.log('Invalid file ' + p);
        }
      } else if (isTrackFile(ext)) {
        track = buildTrackFromPath(p);
        type = 'path';
      }
      if (track) {
        appendTrack(writer, track, type, count);
        count++;
      }
    });
    reader.on('close', resolve);
  });
}

function appendTrack(writer, track, type, count) {
  if (!track) {
    return;
  }
  writer.write([
    track.trackNumber,
    track.title,
    track.album,
    track.artist,
    track.comment,
    track.genre,
    track.date,
    track.copyright
  ]);
  console.log(count + ' ' + type + ' ' +
              track.trackNumber + '|' +
              track.artist + '|' +
              track.album + '|' +
              track.title);
}

function buildTrackFromFlacMeta(path, rootDir) {
  const result = execSync('metaflac ' +
                          opts.join(' ') + ' ' +
                          '"' + rootDir  + path + '"').toString();
  let tags = {};
  result.split("\n").map((keyVal) => keyVal.split("=")).forEach((pair) => {
    if (pair.length >= 2) {
      tags[pair[0]] = pair[1];
    }
  });
  return {
    trackNumber: parseInt(tags.TRACKNUMBER),
    title: tags.TITLE,
    album: tags.ALBUM,
    artist: tags.ARTIST,
    comment: tags.COMMENT,
    genre: tags.GENRE,
    date: tags.DATE,
    copyright: tags.COPYRIGHT
  };
  return null;
}

function buildTrackFromPath(pathString) {
  const paths = pathString.split('/');
  if (paths.length < 4) {
    return null;
  }
  const pathsLength = paths.length;
  const artist = paths[pathsLength - 3];
  const album = paths[pathsLength - 2];
  const trackPath = paths[pathsLength - 1];
  if (trackPath.length <= 3) {
    return null;
  }
  const trackInfo = parseTrackPath(trackPath);
  if (trackInfo.title === null || trackInfo.title === "") {
    return null;
  }
  return {
    trackNumber: trackInfo.trackNumber,
    title: trackInfo.title,
    album: album,
    artist: artist,
    comment: null,
    genre: null,
    date: null,
    copyright: null
  };
}

function parseTrackPath(path) {
  const trackNumber = parseInt(path.substring(0, 2));
  if (isNaN(trackNumber)) {
    return {
      trackNumber: null,
      title: path.split('.')[0]
    };
  }
  return {
    trackNumber: trackNumber,
    title: path.substring(3, path.length - 1).split('.')[0]
  };
}

function uploadFile(auth) {
  return new Promise((resolve, reject) => {
    const drive = google.drive({version: 'v3', auth});
    var media = {
      mimeType: 'text/csv',
      body: fs.createReadStream(tracksFile)
    };
    drive.files.update({
      fileId: process.env.TRACKS_FILE_ID,
      media: media,
      fields: 'id'
    }, function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  });
}

function authroizeGoogleDrive() {
  return new Promise((resolve, reject) => {
    fs.readFile('credentials.json', (err, content) => {
      if (err) {
        return reject(err);;
      }
      authorize(JSON.parse(content), resolve);
    });
  })
}

authroizeGoogleDrive().then((auth) => {
  const writer = csvWriter({ headers: TAGS });
  writer.pipe(fs.createWriteStream(tracksFile))
  return notifySlack('Start importing external tracks')
    .then(() => handlePathListFile(externalFileListFile, externalRootDir, writer))
    .then(() => notifySlack('Start importing internal tracks'))
    .then(() => handlePathListFile(internalFileListFile, internalRootDir, writer))
    .then(() => notifySlack('uploading tracks.csv'))
    .then(() => {
      writer.end()
      return uploadFile(auth);
    });
}).then(() => notifySlack('uploaded tracks.csv'))
  .then(() => savePref());

// From google drive quick start

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
      client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);
      // Store the token to disk for later program executions
      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) console.error(err);
        console.log('Token stored to', TOKEN_PATH);
      });
      callback(oAuth2Client);
    });
  });
}
